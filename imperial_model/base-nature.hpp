// Code generated by Stan version 2.18.1

#include <stan/model/model_header.hpp>

namespace base_nature_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "performance-tests-cmdstan/imperial_model/base-nature.stan");
    reader.add_event(118, 116, "end", "performance-tests-cmdstan/imperial_model/base-nature.stan");
    return reader;
}

class base_nature_model : public prob_grad {
private:
    int M;
    int P;
    int N0;
    vector<int> N;
    int N2;
    vector<vector<int> > cases;
    vector<vector<int> > deaths;
    matrix_d f;
    vector<matrix_d> X;
    vector<int> EpidemicStart;
    vector<double> pop;
    vector<double> SI;
    vector_d SI_rev;
    vector<vector_d> f_rev;
public:
    base_nature_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    base_nature_model(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "base_nature_model_namespace::base_nature_model";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "M", "int", context__.to_vec());
            M = int(0);
            vals_i__ = context__.vals_i("M");
            pos__ = 0;
            M = vals_i__[pos__++];
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "P", "int", context__.to_vec());
            P = int(0);
            vals_i__ = context__.vals_i("P");
            pos__ = 0;
            P = vals_i__[pos__++];
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "N0", "int", context__.to_vec());
            N0 = int(0);
            vals_i__ = context__.vals_i("N0");
            pos__ = 0;
            N0 = vals_i__[pos__++];
            current_statement_begin__ = 5;
            validate_non_negative_index("N", "M", M);
            context__.validate_dims("data initialization", "N", "int", context__.to_vec(M));
            validate_non_negative_index("N", "M", M);
            N = std::vector<int>(M,int(0));
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            size_t N_limit_0__ = M;
            for (size_t i_0__ = 0; i_0__ < N_limit_0__; ++i_0__) {
                N[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 6;
            context__.validate_dims("data initialization", "N2", "int", context__.to_vec());
            N2 = int(0);
            vals_i__ = context__.vals_i("N2");
            pos__ = 0;
            N2 = vals_i__[pos__++];
            current_statement_begin__ = 7;
            validate_non_negative_index("cases", "N2", N2);
            validate_non_negative_index("cases", "M", M);
            context__.validate_dims("data initialization", "cases", "int", context__.to_vec(N2,M));
            validate_non_negative_index("cases", "N2", N2);
            validate_non_negative_index("cases", "M", M);
            cases = std::vector<std::vector<int> >(N2,std::vector<int>(M,int(0)));
            vals_i__ = context__.vals_i("cases");
            pos__ = 0;
            size_t cases_limit_1__ = M;
            for (size_t i_1__ = 0; i_1__ < cases_limit_1__; ++i_1__) {
                size_t cases_limit_0__ = N2;
                for (size_t i_0__ = 0; i_0__ < cases_limit_0__; ++i_0__) {
                    cases[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 8;
            validate_non_negative_index("deaths", "N2", N2);
            validate_non_negative_index("deaths", "M", M);
            context__.validate_dims("data initialization", "deaths", "int", context__.to_vec(N2,M));
            validate_non_negative_index("deaths", "N2", N2);
            validate_non_negative_index("deaths", "M", M);
            deaths = std::vector<std::vector<int> >(N2,std::vector<int>(M,int(0)));
            vals_i__ = context__.vals_i("deaths");
            pos__ = 0;
            size_t deaths_limit_1__ = M;
            for (size_t i_1__ = 0; i_1__ < deaths_limit_1__; ++i_1__) {
                size_t deaths_limit_0__ = N2;
                for (size_t i_0__ = 0; i_0__ < deaths_limit_0__; ++i_0__) {
                    deaths[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 9;
            validate_non_negative_index("f", "N2", N2);
            validate_non_negative_index("f", "M", M);
            context__.validate_dims("data initialization", "f", "matrix_d", context__.to_vec(N2,M));
            validate_non_negative_index("f", "N2", N2);
            validate_non_negative_index("f", "M", M);
            f = matrix_d(static_cast<Eigen::VectorXd::Index>(N2),static_cast<Eigen::VectorXd::Index>(M));
            vals_r__ = context__.vals_r("f");
            pos__ = 0;
            size_t f_m_mat_lim__ = N2;
            size_t f_n_mat_lim__ = M;
            for (size_t n_mat__ = 0; n_mat__ < f_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < f_m_mat_lim__; ++m_mat__) {
                    f(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 10;
            validate_non_negative_index("X", "M", M);
            validate_non_negative_index("X", "N2", N2);
            validate_non_negative_index("X", "P", P);
            context__.validate_dims("data initialization", "X", "matrix_d", context__.to_vec(M,N2,P));
            validate_non_negative_index("X", "M", M);
            validate_non_negative_index("X", "N2", N2);
            validate_non_negative_index("X", "P", P);
            X = std::vector<matrix_d>(M,matrix_d(static_cast<Eigen::VectorXd::Index>(N2),static_cast<Eigen::VectorXd::Index>(P)));
            vals_r__ = context__.vals_r("X");
            pos__ = 0;
            size_t X_m_mat_lim__ = N2;
            size_t X_n_mat_lim__ = P;
            for (size_t n_mat__ = 0; n_mat__ < X_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < X_m_mat_lim__; ++m_mat__) {
                    size_t X_limit_0__ = M;
                    for (size_t i_0__ = 0; i_0__ < X_limit_0__; ++i_0__) {
                        X[i_0__](m_mat__,n_mat__) = vals_r__[pos__++];
            }
                }
            }
            current_statement_begin__ = 11;
            validate_non_negative_index("EpidemicStart", "M", M);
            context__.validate_dims("data initialization", "EpidemicStart", "int", context__.to_vec(M));
            validate_non_negative_index("EpidemicStart", "M", M);
            EpidemicStart = std::vector<int>(M,int(0));
            vals_i__ = context__.vals_i("EpidemicStart");
            pos__ = 0;
            size_t EpidemicStart_limit_0__ = M;
            for (size_t i_0__ = 0; i_0__ < EpidemicStart_limit_0__; ++i_0__) {
                EpidemicStart[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 12;
            validate_non_negative_index("pop", "M", M);
            context__.validate_dims("data initialization", "pop", "double", context__.to_vec(M));
            validate_non_negative_index("pop", "M", M);
            pop = std::vector<double>(M,double(0));
            vals_r__ = context__.vals_r("pop");
            pos__ = 0;
            size_t pop_limit_0__ = M;
            for (size_t i_0__ = 0; i_0__ < pop_limit_0__; ++i_0__) {
                pop[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 13;
            validate_non_negative_index("SI", "N2", N2);
            context__.validate_dims("data initialization", "SI", "double", context__.to_vec(N2));
            validate_non_negative_index("SI", "N2", N2);
            SI = std::vector<double>(N2,double(0));
            vals_r__ = context__.vals_r("SI");
            pos__ = 0;
            size_t SI_limit_0__ = N2;
            for (size_t i_0__ = 0; i_0__ < SI_limit_0__; ++i_0__) {
                SI[i_0__] = vals_r__[pos__++];
            }

            // validate, data variables
            current_statement_begin__ = 2;
            check_greater_or_equal(function__,"M",M,1);
            current_statement_begin__ = 3;
            check_greater_or_equal(function__,"P",P,1);
            current_statement_begin__ = 4;
            check_greater_or_equal(function__,"N0",N0,1);
            current_statement_begin__ = 5;
            for (int k0__ = 0; k0__ < M; ++k0__) {
                check_greater_or_equal(function__,"N[k0__]",N[k0__],1);
            }
            current_statement_begin__ = 6;
            check_greater_or_equal(function__,"N2",N2,1);
            current_statement_begin__ = 7;
            current_statement_begin__ = 8;
            current_statement_begin__ = 9;
            current_statement_begin__ = 10;
            current_statement_begin__ = 11;
            current_statement_begin__ = 12;
            current_statement_begin__ = 13;
            // initialize data variables
            current_statement_begin__ = 17;
            validate_non_negative_index("SI_rev", "N2", N2);
            SI_rev = vector_d(static_cast<Eigen::VectorXd::Index>(N2));
            stan::math::fill(SI_rev,DUMMY_VAR__);
            current_statement_begin__ = 18;
            validate_non_negative_index("f_rev", "M", M);
            validate_non_negative_index("f_rev", "N2", N2);
            f_rev = std::vector<vector_d>(M,vector_d(static_cast<Eigen::VectorXd::Index>(N2)));
            stan::math::fill(f_rev,DUMMY_VAR__);

            current_statement_begin__ = 20;
            for (int i = 1; i <= N2; ++i) {
                current_statement_begin__ = 21;
                stan::model::assign(SI_rev, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            get_base1(SI,((N2 - i) + 1),"SI",1), 
                            "assigning variable SI_rev");
            }
            current_statement_begin__ = 23;
            for (int m = 1; m <= M; ++m) {

                current_statement_begin__ = 24;
                for (int i = 1; i <= N2; ++i) {

                    current_statement_begin__ = 25;
                    stan::model::assign(f_rev, 
                                stan::model::cons_list(stan::model::index_uni(m), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                                get_base1(f,((N2 - i) + 1),m,"f",1), 
                                "assigning variable f_rev");
                }
            }

            // validate transformed data
            current_statement_begin__ = 17;
            current_statement_begin__ = 18;

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 32;
            validate_non_negative_index("mu", "M", M);
            num_params_r__ += M;
            current_statement_begin__ = 33;
            validate_non_negative_index("alpha_hier", "P", P);
            num_params_r__ += P;
            current_statement_begin__ = 34;
            ++num_params_r__;
            current_statement_begin__ = 35;
            validate_non_negative_index("lockdown", "M", M);
            num_params_r__ += M;
            current_statement_begin__ = 36;
            validate_non_negative_index("last_intervention", "M", M);
            num_params_r__ += M;
            current_statement_begin__ = 37;
            ++num_params_r__;
            current_statement_begin__ = 38;
            validate_non_negative_index("y", "M", M);
            num_params_r__ += M;
            current_statement_begin__ = 39;
            ++num_params_r__;
            current_statement_begin__ = 40;
            ++num_params_r__;
            current_statement_begin__ = 41;
            validate_non_negative_index("ifr_noise", "M", M);
            num_params_r__ += M;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~base_nature_model() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("mu")))
            throw std::runtime_error("variable mu missing");
        vals_r__ = context__.vals_r("mu");
        pos__ = 0U;
        validate_non_negative_index("mu", "M", M);
        context__.validate_dims("initialization", "mu", "double", context__.to_vec(M));
        std::vector<double> mu(M,double(0));
        for (int i0__ = 0U; i0__ < M; ++i0__)
            mu[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < M; ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,mu[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable mu: ") + e.what());
        }

        if (!(context__.contains_r("alpha_hier")))
            throw std::runtime_error("variable alpha_hier missing");
        vals_r__ = context__.vals_r("alpha_hier");
        pos__ = 0U;
        validate_non_negative_index("alpha_hier", "P", P);
        context__.validate_dims("initialization", "alpha_hier", "double", context__.to_vec(P));
        std::vector<double> alpha_hier(P,double(0));
        for (int i0__ = 0U; i0__ < P; ++i0__)
            alpha_hier[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < P; ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,alpha_hier[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable alpha_hier: ") + e.what());
        }

        if (!(context__.contains_r("gamma")))
            throw std::runtime_error("variable gamma missing");
        vals_r__ = context__.vals_r("gamma");
        pos__ = 0U;
        context__.validate_dims("initialization", "gamma", "double", context__.to_vec());
        double gamma(0);
        gamma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,gamma);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable gamma: ") + e.what());
        }

        if (!(context__.contains_r("lockdown")))
            throw std::runtime_error("variable lockdown missing");
        vals_r__ = context__.vals_r("lockdown");
        pos__ = 0U;
        validate_non_negative_index("lockdown", "M", M);
        context__.validate_dims("initialization", "lockdown", "vector_d", context__.to_vec(M));
        vector_d lockdown(static_cast<Eigen::VectorXd::Index>(M));
        for (int j1__ = 0U; j1__ < M; ++j1__)
            lockdown(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(lockdown);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable lockdown: ") + e.what());
        }

        if (!(context__.contains_r("last_intervention")))
            throw std::runtime_error("variable last_intervention missing");
        vals_r__ = context__.vals_r("last_intervention");
        pos__ = 0U;
        validate_non_negative_index("last_intervention", "M", M);
        context__.validate_dims("initialization", "last_intervention", "vector_d", context__.to_vec(M));
        vector_d last_intervention(static_cast<Eigen::VectorXd::Index>(M));
        for (int j1__ = 0U; j1__ < M; ++j1__)
            last_intervention(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(last_intervention);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable last_intervention: ") + e.what());
        }

        if (!(context__.contains_r("kappa")))
            throw std::runtime_error("variable kappa missing");
        vals_r__ = context__.vals_r("kappa");
        pos__ = 0U;
        context__.validate_dims("initialization", "kappa", "double", context__.to_vec());
        double kappa(0);
        kappa = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,kappa);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable kappa: ") + e.what());
        }

        if (!(context__.contains_r("y")))
            throw std::runtime_error("variable y missing");
        vals_r__ = context__.vals_r("y");
        pos__ = 0U;
        validate_non_negative_index("y", "M", M);
        context__.validate_dims("initialization", "y", "double", context__.to_vec(M));
        std::vector<double> y(M,double(0));
        for (int i0__ = 0U; i0__ < M; ++i0__)
            y[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < M; ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,y[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable y: ") + e.what());
        }

        if (!(context__.contains_r("phi")))
            throw std::runtime_error("variable phi missing");
        vals_r__ = context__.vals_r("phi");
        pos__ = 0U;
        context__.validate_dims("initialization", "phi", "double", context__.to_vec());
        double phi(0);
        phi = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,phi);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable phi: ") + e.what());
        }

        if (!(context__.contains_r("tau")))
            throw std::runtime_error("variable tau missing");
        vals_r__ = context__.vals_r("tau");
        pos__ = 0U;
        context__.validate_dims("initialization", "tau", "double", context__.to_vec());
        double tau(0);
        tau = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,tau);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable tau: ") + e.what());
        }

        if (!(context__.contains_r("ifr_noise")))
            throw std::runtime_error("variable ifr_noise missing");
        vals_r__ = context__.vals_r("ifr_noise");
        pos__ = 0U;
        validate_non_negative_index("ifr_noise", "M", M);
        context__.validate_dims("initialization", "ifr_noise", "double", context__.to_vec(M));
        std::vector<double> ifr_noise(M,double(0));
        for (int i0__ = 0U; i0__ < M; ++i0__)
            ifr_noise[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < M; ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,ifr_noise[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable ifr_noise: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);

            vector<local_scalar_t__> mu;
            size_t dim_mu_0__ = M;
            mu.reserve(dim_mu_0__);
            for (size_t k_0__ = 0; k_0__ < dim_mu_0__; ++k_0__) {
                if (jacobian__)
                    mu.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    mu.push_back(in__.scalar_lb_constrain(0));
            }

            vector<local_scalar_t__> alpha_hier;
            size_t dim_alpha_hier_0__ = P;
            alpha_hier.reserve(dim_alpha_hier_0__);
            for (size_t k_0__ = 0; k_0__ < dim_alpha_hier_0__; ++k_0__) {
                if (jacobian__)
                    alpha_hier.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    alpha_hier.push_back(in__.scalar_lb_constrain(0));
            }

            local_scalar_t__ gamma;
            (void) gamma;  // dummy to suppress unused var warning
            if (jacobian__)
                gamma = in__.scalar_lb_constrain(0,lp__);
            else
                gamma = in__.scalar_lb_constrain(0);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  lockdown;
            (void) lockdown;  // dummy to suppress unused var warning
            if (jacobian__)
                lockdown = in__.vector_constrain(M,lp__);
            else
                lockdown = in__.vector_constrain(M);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  last_intervention;
            (void) last_intervention;  // dummy to suppress unused var warning
            if (jacobian__)
                last_intervention = in__.vector_constrain(M,lp__);
            else
                last_intervention = in__.vector_constrain(M);

            local_scalar_t__ kappa;
            (void) kappa;  // dummy to suppress unused var warning
            if (jacobian__)
                kappa = in__.scalar_lb_constrain(0,lp__);
            else
                kappa = in__.scalar_lb_constrain(0);

            vector<local_scalar_t__> y;
            size_t dim_y_0__ = M;
            y.reserve(dim_y_0__);
            for (size_t k_0__ = 0; k_0__ < dim_y_0__; ++k_0__) {
                if (jacobian__)
                    y.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    y.push_back(in__.scalar_lb_constrain(0));
            }

            local_scalar_t__ phi;
            (void) phi;  // dummy to suppress unused var warning
            if (jacobian__)
                phi = in__.scalar_lb_constrain(0,lp__);
            else
                phi = in__.scalar_lb_constrain(0);

            local_scalar_t__ tau;
            (void) tau;  // dummy to suppress unused var warning
            if (jacobian__)
                tau = in__.scalar_lb_constrain(0,lp__);
            else
                tau = in__.scalar_lb_constrain(0);

            vector<local_scalar_t__> ifr_noise;
            size_t dim_ifr_noise_0__ = M;
            ifr_noise.reserve(dim_ifr_noise_0__);
            for (size_t k_0__ = 0; k_0__ < dim_ifr_noise_0__; ++k_0__) {
                if (jacobian__)
                    ifr_noise.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    ifr_noise.push_back(in__.scalar_lb_constrain(0));
            }


            // transformed parameters
            current_statement_begin__ = 45;
            validate_non_negative_index("alpha", "P", P);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  alpha(static_cast<Eigen::VectorXd::Index>(P));
            (void) alpha;  // dummy to suppress unused var warning

            stan::math::initialize(alpha, DUMMY_VAR__);
            stan::math::fill(alpha,DUMMY_VAR__);
            current_statement_begin__ = 46;
            validate_non_negative_index("prediction", "N2", N2);
            validate_non_negative_index("prediction", "M", M);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  prediction(static_cast<Eigen::VectorXd::Index>(N2),static_cast<Eigen::VectorXd::Index>(M));
            (void) prediction;  // dummy to suppress unused var warning

            stan::math::initialize(prediction, DUMMY_VAR__);
            stan::math::fill(prediction,DUMMY_VAR__);
            stan::math::assign(prediction,rep_matrix(0,N2,M));
            current_statement_begin__ = 47;
            validate_non_negative_index("E_deaths", "N2", N2);
            validate_non_negative_index("E_deaths", "M", M);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  E_deaths(static_cast<Eigen::VectorXd::Index>(N2),static_cast<Eigen::VectorXd::Index>(M));
            (void) E_deaths;  // dummy to suppress unused var warning

            stan::math::initialize(E_deaths, DUMMY_VAR__);
            stan::math::fill(E_deaths,DUMMY_VAR__);
            stan::math::assign(E_deaths,rep_matrix(0,N2,M));
            current_statement_begin__ = 48;
            validate_non_negative_index("Rt", "N2", N2);
            validate_non_negative_index("Rt", "M", M);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  Rt(static_cast<Eigen::VectorXd::Index>(N2),static_cast<Eigen::VectorXd::Index>(M));
            (void) Rt;  // dummy to suppress unused var warning

            stan::math::initialize(Rt, DUMMY_VAR__);
            stan::math::fill(Rt,DUMMY_VAR__);
            stan::math::assign(Rt,rep_matrix(0,N2,M));
            current_statement_begin__ = 49;
            validate_non_negative_index("Rt_adj", "N2", N2);
            validate_non_negative_index("Rt_adj", "M", M);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  Rt_adj(static_cast<Eigen::VectorXd::Index>(N2),static_cast<Eigen::VectorXd::Index>(M));
            (void) Rt_adj;  // dummy to suppress unused var warning

            stan::math::initialize(Rt_adj, DUMMY_VAR__);
            stan::math::fill(Rt_adj,DUMMY_VAR__);
            stan::math::assign(Rt_adj,Rt);


            {
            current_statement_begin__ = 52;
            validate_non_negative_index("cumm_sum", "N2", N2);
            validate_non_negative_index("cumm_sum", "M", M);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  cumm_sum(static_cast<Eigen::VectorXd::Index>(N2),static_cast<Eigen::VectorXd::Index>(M));
            (void) cumm_sum;  // dummy to suppress unused var warning

            stan::math::initialize(cumm_sum, DUMMY_VAR__);
            stan::math::fill(cumm_sum,DUMMY_VAR__);
            stan::math::assign(cumm_sum,rep_matrix(0,N2,M));


            current_statement_begin__ = 53;
            for (int i = 1; i <= P; ++i) {

                current_statement_begin__ = 54;
                stan::model::assign(alpha, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (get_base1(alpha_hier,i,"alpha_hier",1) - (stan::math::log(1.05) / 6.0)), 
                            "assigning variable alpha");
            }
            current_statement_begin__ = 56;
            for (int m = 1; m <= M; ++m) {

                current_statement_begin__ = 57;
                stan::model::assign(prediction, 
                            stan::model::cons_list(stan::model::index_min_max(1, N0), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                            rep_vector(get_base1(y,m,"y",1),N0), 
                            "assigning variable prediction");
                current_statement_begin__ = 58;
                stan::model::assign(cumm_sum, 
                            stan::model::cons_list(stan::model::index_min_max(2, N0), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                            cumulative_sum(stan::model::rvalue(prediction, stan::model::cons_list(stan::model::index_min_max(2, N0), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), "prediction")), 
                            "assigning variable cumm_sum");
                current_statement_begin__ = 60;
                stan::model::assign(Rt, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                            multiply(get_base1(mu,m,"mu",1),stan::math::exp(subtract(subtract(multiply(minus(stan::model::rvalue(get_base1(X,m,"X",1), stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_min_max(1, 6), stan::model::nil_index_list())), "X[m]")),stan::model::rvalue(alpha, stan::model::cons_list(stan::model::index_min_max(1, 6), stan::model::nil_index_list()), "alpha")),multiply(stan::model::rvalue(get_base1(X,m,"X",1), stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(5), stan::model::nil_index_list())), "X[m]"),get_base1(lockdown,m,"lockdown",1))),multiply(stan::model::rvalue(get_base1(X,m,"X",1), stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(7), stan::model::nil_index_list())), "X[m]"),get_base1(last_intervention,m,"last_intervention",1))))), 
                            "assigning variable Rt");
                current_statement_begin__ = 61;
                stan::model::assign(Rt_adj, 
                            stan::model::cons_list(stan::model::index_min_max(1, N0), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                            stan::model::rvalue(Rt, stan::model::cons_list(stan::model::index_min_max(1, N0), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), "Rt"), 
                            "assigning variable Rt_adj");
                current_statement_begin__ = 62;
                for (int i = (N0 + 1); i <= N2; ++i) {
                    {
                    current_statement_begin__ = 63;
                    local_scalar_t__ convolution;
                    (void) convolution;  // dummy to suppress unused var warning

                    stan::math::initialize(convolution, DUMMY_VAR__);
                    stan::math::fill(convolution,DUMMY_VAR__);
                    stan::math::assign(convolution,dot_product(sub_col(prediction,1,m,(i - 1)),tail(SI_rev,(i - 1))));


                    current_statement_begin__ = 64;
                    stan::model::assign(cumm_sum, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                                stan::model::deep_copy((get_base1(cumm_sum,(i - 1),m,"cumm_sum",1) + get_base1(prediction,(i - 1),m,"prediction",1))), 
                                "assigning variable cumm_sum");
                    current_statement_begin__ = 65;
                    stan::model::assign(Rt_adj, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                                (((get_base1(pop,m,"pop",1) - get_base1(cumm_sum,i,m,"cumm_sum",1)) / get_base1(pop,m,"pop",1)) * get_base1(Rt,i,m,"Rt",1)), 
                                "assigning variable Rt_adj");
                    current_statement_begin__ = 66;
                    stan::model::assign(prediction, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                                (get_base1(Rt_adj,i,m,"Rt_adj",1) * convolution), 
                                "assigning variable prediction");
                    }
                }
                current_statement_begin__ = 68;
                stan::model::assign(E_deaths, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                            (1.0000000000000001e-15 * get_base1(prediction,1,m,"prediction",1)), 
                            "assigning variable E_deaths");
                current_statement_begin__ = 69;
                for (int i = 2; i <= N2; ++i) {

                    current_statement_begin__ = 70;
                    stan::model::assign(E_deaths, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                                (get_base1(ifr_noise,m,"ifr_noise",1) * dot_product(sub_col(prediction,1,m,(i - 1)),tail(get_base1(f_rev,m,"f_rev",1),(i - 1)))), 
                                "assigning variable E_deaths");
                }
            }
            }

            // validate transformed parameters
            for (int i0__ = 0; i0__ < P; ++i0__) {
                if (stan::math::is_uninitialized(alpha(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: alpha" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < N2; ++i0__) {
                for (int i1__ = 0; i1__ < M; ++i1__) {
                    if (stan::math::is_uninitialized(prediction(i0__,i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: prediction" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
            for (int i0__ = 0; i0__ < N2; ++i0__) {
                for (int i1__ = 0; i1__ < M; ++i1__) {
                    if (stan::math::is_uninitialized(E_deaths(i0__,i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: E_deaths" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
            for (int i0__ = 0; i0__ < N2; ++i0__) {
                for (int i1__ = 0; i1__ < M; ++i1__) {
                    if (stan::math::is_uninitialized(Rt(i0__,i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: Rt" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
            for (int i0__ = 0; i0__ < N2; ++i0__) {
                for (int i1__ = 0; i1__ < M; ++i1__) {
                    if (stan::math::is_uninitialized(Rt_adj(i0__,i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: Rt_adj" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 45;
            current_statement_begin__ = 46;
            current_statement_begin__ = 47;
            current_statement_begin__ = 48;
            current_statement_begin__ = 49;

            // model body

            current_statement_begin__ = 76;
            lp_accum__.add(exponential_log<propto__>(tau, 0.029999999999999999));
            current_statement_begin__ = 77;
            for (int m = 1; m <= M; ++m) {

                current_statement_begin__ = 78;
                lp_accum__.add(exponential_log<propto__>(get_base1(y,m,"y",1), (1 / tau)));
            }
            current_statement_begin__ = 80;
            lp_accum__.add(normal_log<propto__>(gamma, 0, 0.20000000000000001));
            current_statement_begin__ = 81;
            lp_accum__.add(normal_log<propto__>(lockdown, 0, gamma));
            current_statement_begin__ = 82;
            lp_accum__.add(normal_log<propto__>(last_intervention, 0, gamma));
            current_statement_begin__ = 83;
            lp_accum__.add(normal_log<propto__>(phi, 0, 5));
            current_statement_begin__ = 84;
            lp_accum__.add(normal_log<propto__>(kappa, 0, 0.5));
            current_statement_begin__ = 85;
            lp_accum__.add(normal_log<propto__>(mu, 3.2799999999999998, kappa));
            current_statement_begin__ = 86;
            lp_accum__.add(gamma_log<propto__>(alpha_hier, 0.16669999999999999, 1));
            current_statement_begin__ = 87;
            lp_accum__.add(normal_log<propto__>(ifr_noise, 1, 0.10000000000000001));
            current_statement_begin__ = 88;
            for (int m = 1; m <= M; ++m) {

                current_statement_begin__ = 89;
                lp_accum__.add(neg_binomial_2_log<propto__>(stan::model::rvalue(deaths, stan::model::cons_list(stan::model::index_min_max(get_base1(EpidemicStart,m,"EpidemicStart",1), get_base1(N,m,"N",1)), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), "deaths"), stan::model::rvalue(E_deaths, stan::model::cons_list(stan::model::index_min_max(get_base1(EpidemicStart,m,"EpidemicStart",1), get_base1(N,m,"N",1)), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), "E_deaths"), phi));
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("mu");
        names__.push_back("alpha_hier");
        names__.push_back("gamma");
        names__.push_back("lockdown");
        names__.push_back("last_intervention");
        names__.push_back("kappa");
        names__.push_back("y");
        names__.push_back("phi");
        names__.push_back("tau");
        names__.push_back("ifr_noise");
        names__.push_back("alpha");
        names__.push_back("prediction");
        names__.push_back("E_deaths");
        names__.push_back("Rt");
        names__.push_back("Rt_adj");
        names__.push_back("prediction0");
        names__.push_back("E_deaths0");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(P);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(P);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N2);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N2);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N2);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N2);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N2);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N2);
        dims__.push_back(M);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);
        static const char* function__ = "base_nature_model_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        vector<double> mu;
        size_t dim_mu_0__ = M;
        for (size_t k_0__ = 0; k_0__ < dim_mu_0__; ++k_0__) {
            mu.push_back(in__.scalar_lb_constrain(0));
        }
        vector<double> alpha_hier;
        size_t dim_alpha_hier_0__ = P;
        for (size_t k_0__ = 0; k_0__ < dim_alpha_hier_0__; ++k_0__) {
            alpha_hier.push_back(in__.scalar_lb_constrain(0));
        }
        double gamma = in__.scalar_lb_constrain(0);
        vector_d lockdown = in__.vector_constrain(M);
        vector_d last_intervention = in__.vector_constrain(M);
        double kappa = in__.scalar_lb_constrain(0);
        vector<double> y;
        size_t dim_y_0__ = M;
        for (size_t k_0__ = 0; k_0__ < dim_y_0__; ++k_0__) {
            y.push_back(in__.scalar_lb_constrain(0));
        }
        double phi = in__.scalar_lb_constrain(0);
        double tau = in__.scalar_lb_constrain(0);
        vector<double> ifr_noise;
        size_t dim_ifr_noise_0__ = M;
        for (size_t k_0__ = 0; k_0__ < dim_ifr_noise_0__; ++k_0__) {
            ifr_noise.push_back(in__.scalar_lb_constrain(0));
        }
            for (int k_0__ = 0; k_0__ < M; ++k_0__) {
            vars__.push_back(mu[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < P; ++k_0__) {
            vars__.push_back(alpha_hier[k_0__]);
            }
        vars__.push_back(gamma);
            for (int k_0__ = 0; k_0__ < M; ++k_0__) {
            vars__.push_back(lockdown[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < M; ++k_0__) {
            vars__.push_back(last_intervention[k_0__]);
            }
        vars__.push_back(kappa);
            for (int k_0__ = 0; k_0__ < M; ++k_0__) {
            vars__.push_back(y[k_0__]);
            }
        vars__.push_back(phi);
        vars__.push_back(tau);
            for (int k_0__ = 0; k_0__ < M; ++k_0__) {
            vars__.push_back(ifr_noise[k_0__]);
            }

        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            current_statement_begin__ = 45;
            validate_non_negative_index("alpha", "P", P);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  alpha(static_cast<Eigen::VectorXd::Index>(P));
            (void) alpha;  // dummy to suppress unused var warning

            stan::math::initialize(alpha, DUMMY_VAR__);
            stan::math::fill(alpha,DUMMY_VAR__);
            current_statement_begin__ = 46;
            validate_non_negative_index("prediction", "N2", N2);
            validate_non_negative_index("prediction", "M", M);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  prediction(static_cast<Eigen::VectorXd::Index>(N2),static_cast<Eigen::VectorXd::Index>(M));
            (void) prediction;  // dummy to suppress unused var warning

            stan::math::initialize(prediction, DUMMY_VAR__);
            stan::math::fill(prediction,DUMMY_VAR__);
            stan::math::assign(prediction,rep_matrix(0,N2,M));
            current_statement_begin__ = 47;
            validate_non_negative_index("E_deaths", "N2", N2);
            validate_non_negative_index("E_deaths", "M", M);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  E_deaths(static_cast<Eigen::VectorXd::Index>(N2),static_cast<Eigen::VectorXd::Index>(M));
            (void) E_deaths;  // dummy to suppress unused var warning

            stan::math::initialize(E_deaths, DUMMY_VAR__);
            stan::math::fill(E_deaths,DUMMY_VAR__);
            stan::math::assign(E_deaths,rep_matrix(0,N2,M));
            current_statement_begin__ = 48;
            validate_non_negative_index("Rt", "N2", N2);
            validate_non_negative_index("Rt", "M", M);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  Rt(static_cast<Eigen::VectorXd::Index>(N2),static_cast<Eigen::VectorXd::Index>(M));
            (void) Rt;  // dummy to suppress unused var warning

            stan::math::initialize(Rt, DUMMY_VAR__);
            stan::math::fill(Rt,DUMMY_VAR__);
            stan::math::assign(Rt,rep_matrix(0,N2,M));
            current_statement_begin__ = 49;
            validate_non_negative_index("Rt_adj", "N2", N2);
            validate_non_negative_index("Rt_adj", "M", M);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  Rt_adj(static_cast<Eigen::VectorXd::Index>(N2),static_cast<Eigen::VectorXd::Index>(M));
            (void) Rt_adj;  // dummy to suppress unused var warning

            stan::math::initialize(Rt_adj, DUMMY_VAR__);
            stan::math::fill(Rt_adj,DUMMY_VAR__);
            stan::math::assign(Rt_adj,Rt);


            {
            current_statement_begin__ = 52;
            validate_non_negative_index("cumm_sum", "N2", N2);
            validate_non_negative_index("cumm_sum", "M", M);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  cumm_sum(static_cast<Eigen::VectorXd::Index>(N2),static_cast<Eigen::VectorXd::Index>(M));
            (void) cumm_sum;  // dummy to suppress unused var warning

            stan::math::initialize(cumm_sum, DUMMY_VAR__);
            stan::math::fill(cumm_sum,DUMMY_VAR__);
            stan::math::assign(cumm_sum,rep_matrix(0,N2,M));


            current_statement_begin__ = 53;
            for (int i = 1; i <= P; ++i) {

                current_statement_begin__ = 54;
                stan::model::assign(alpha, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (get_base1(alpha_hier,i,"alpha_hier",1) - (stan::math::log(1.05) / 6.0)), 
                            "assigning variable alpha");
            }
            current_statement_begin__ = 56;
            for (int m = 1; m <= M; ++m) {

                current_statement_begin__ = 57;
                stan::model::assign(prediction, 
                            stan::model::cons_list(stan::model::index_min_max(1, N0), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                            rep_vector(get_base1(y,m,"y",1),N0), 
                            "assigning variable prediction");
                current_statement_begin__ = 58;
                stan::model::assign(cumm_sum, 
                            stan::model::cons_list(stan::model::index_min_max(2, N0), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                            cumulative_sum(stan::model::rvalue(prediction, stan::model::cons_list(stan::model::index_min_max(2, N0), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), "prediction")), 
                            "assigning variable cumm_sum");
                current_statement_begin__ = 60;
                stan::model::assign(Rt, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                            multiply(get_base1(mu,m,"mu",1),stan::math::exp(subtract(subtract(multiply(minus(stan::model::rvalue(get_base1(X,m,"X",1), stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_min_max(1, 6), stan::model::nil_index_list())), "X[m]")),stan::model::rvalue(alpha, stan::model::cons_list(stan::model::index_min_max(1, 6), stan::model::nil_index_list()), "alpha")),multiply(stan::model::rvalue(get_base1(X,m,"X",1), stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(5), stan::model::nil_index_list())), "X[m]"),get_base1(lockdown,m,"lockdown",1))),multiply(stan::model::rvalue(get_base1(X,m,"X",1), stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(7), stan::model::nil_index_list())), "X[m]"),get_base1(last_intervention,m,"last_intervention",1))))), 
                            "assigning variable Rt");
                current_statement_begin__ = 61;
                stan::model::assign(Rt_adj, 
                            stan::model::cons_list(stan::model::index_min_max(1, N0), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                            stan::model::rvalue(Rt, stan::model::cons_list(stan::model::index_min_max(1, N0), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), "Rt"), 
                            "assigning variable Rt_adj");
                current_statement_begin__ = 62;
                for (int i = (N0 + 1); i <= N2; ++i) {
                    {
                    current_statement_begin__ = 63;
                    local_scalar_t__ convolution;
                    (void) convolution;  // dummy to suppress unused var warning

                    stan::math::initialize(convolution, DUMMY_VAR__);
                    stan::math::fill(convolution,DUMMY_VAR__);
                    stan::math::assign(convolution,dot_product(sub_col(prediction,1,m,(i - 1)),tail(SI_rev,(i - 1))));


                    current_statement_begin__ = 64;
                    stan::model::assign(cumm_sum, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                                stan::model::deep_copy((get_base1(cumm_sum,(i - 1),m,"cumm_sum",1) + get_base1(prediction,(i - 1),m,"prediction",1))), 
                                "assigning variable cumm_sum");
                    current_statement_begin__ = 65;
                    stan::model::assign(Rt_adj, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                                (((get_base1(pop,m,"pop",1) - get_base1(cumm_sum,i,m,"cumm_sum",1)) / get_base1(pop,m,"pop",1)) * get_base1(Rt,i,m,"Rt",1)), 
                                "assigning variable Rt_adj");
                    current_statement_begin__ = 66;
                    stan::model::assign(prediction, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                                (get_base1(Rt_adj,i,m,"Rt_adj",1) * convolution), 
                                "assigning variable prediction");
                    }
                }
                current_statement_begin__ = 68;
                stan::model::assign(E_deaths, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                            (1.0000000000000001e-15 * get_base1(prediction,1,m,"prediction",1)), 
                            "assigning variable E_deaths");
                current_statement_begin__ = 69;
                for (int i = 2; i <= N2; ++i) {

                    current_statement_begin__ = 70;
                    stan::model::assign(E_deaths, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                                (get_base1(ifr_noise,m,"ifr_noise",1) * dot_product(sub_col(prediction,1,m,(i - 1)),tail(get_base1(f_rev,m,"f_rev",1),(i - 1)))), 
                                "assigning variable E_deaths");
                }
            }
            }

            // validate transformed parameters
            current_statement_begin__ = 45;
            current_statement_begin__ = 46;
            current_statement_begin__ = 47;
            current_statement_begin__ = 48;
            current_statement_begin__ = 49;

            // write transformed parameters
            if (include_tparams__) {
            for (int k_0__ = 0; k_0__ < P; ++k_0__) {
            vars__.push_back(alpha[k_0__]);
            }
            for (int k_1__ = 0; k_1__ < M; ++k_1__) {
                for (int k_0__ = 0; k_0__ < N2; ++k_0__) {
                vars__.push_back(prediction(k_0__, k_1__));
                }
            }
            for (int k_1__ = 0; k_1__ < M; ++k_1__) {
                for (int k_0__ = 0; k_0__ < N2; ++k_0__) {
                vars__.push_back(E_deaths(k_0__, k_1__));
                }
            }
            for (int k_1__ = 0; k_1__ < M; ++k_1__) {
                for (int k_0__ = 0; k_0__ < N2; ++k_0__) {
                vars__.push_back(Rt(k_0__, k_1__));
                }
            }
            for (int k_1__ = 0; k_1__ < M; ++k_1__) {
                for (int k_0__ = 0; k_0__ < N2; ++k_0__) {
                vars__.push_back(Rt_adj(k_0__, k_1__));
                }
            }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 94;
            validate_non_negative_index("prediction0", "N2", N2);
            validate_non_negative_index("prediction0", "M", M);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  prediction0(static_cast<Eigen::VectorXd::Index>(N2),static_cast<Eigen::VectorXd::Index>(M));
            (void) prediction0;  // dummy to suppress unused var warning

            stan::math::initialize(prediction0, DUMMY_VAR__);
            stan::math::fill(prediction0,DUMMY_VAR__);
            stan::math::assign(prediction0,rep_matrix(0,N2,M));
            current_statement_begin__ = 95;
            validate_non_negative_index("E_deaths0", "N2", N2);
            validate_non_negative_index("E_deaths0", "M", M);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  E_deaths0(static_cast<Eigen::VectorXd::Index>(N2),static_cast<Eigen::VectorXd::Index>(M));
            (void) E_deaths0;  // dummy to suppress unused var warning

            stan::math::initialize(E_deaths0, DUMMY_VAR__);
            stan::math::fill(E_deaths0,DUMMY_VAR__);
            stan::math::assign(E_deaths0,rep_matrix(0,N2,M));


            {
            current_statement_begin__ = 98;
            validate_non_negative_index("cumm_sum0", "N2", N2);
            validate_non_negative_index("cumm_sum0", "M", M);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  cumm_sum0(static_cast<Eigen::VectorXd::Index>(N2),static_cast<Eigen::VectorXd::Index>(M));
            (void) cumm_sum0;  // dummy to suppress unused var warning

            stan::math::initialize(cumm_sum0, DUMMY_VAR__);
            stan::math::fill(cumm_sum0,DUMMY_VAR__);
            stan::math::assign(cumm_sum0,rep_matrix(0,N2,M));


            current_statement_begin__ = 99;
            for (int m = 1; m <= M; ++m) {

                current_statement_begin__ = 100;
                for (int i = 2; i <= N0; ++i) {

                    current_statement_begin__ = 101;
                    stan::model::assign(cumm_sum0, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                                stan::model::deep_copy((get_base1(cumm_sum0,(i - 1),m,"cumm_sum0",1) + get_base1(y,m,"y",1))), 
                                "assigning variable cumm_sum0");
                }
                current_statement_begin__ = 103;
                stan::model::assign(prediction0, 
                            stan::model::cons_list(stan::model::index_min_max(1, N0), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                            rep_vector(get_base1(y,m,"y",1),N0), 
                            "assigning variable prediction0");
                current_statement_begin__ = 104;
                for (int i = (N0 + 1); i <= N2; ++i) {
                    {
                    current_statement_begin__ = 105;
                    local_scalar_t__ convolution0;
                    (void) convolution0;  // dummy to suppress unused var warning

                    stan::math::initialize(convolution0, DUMMY_VAR__);
                    stan::math::fill(convolution0,DUMMY_VAR__);
                    stan::math::assign(convolution0,dot_product(sub_col(prediction0,1,m,(i - 1)),tail(SI_rev,(i - 1))));


                    current_statement_begin__ = 106;
                    stan::model::assign(cumm_sum0, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                                stan::model::deep_copy((get_base1(cumm_sum0,(i - 1),m,"cumm_sum0",1) + get_base1(prediction0,(i - 1),m,"prediction0",1))), 
                                "assigning variable cumm_sum0");
                    current_statement_begin__ = 107;
                    stan::model::assign(prediction0, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                                ((((get_base1(pop,m,"pop",1) - get_base1(cumm_sum0,i,m,"cumm_sum0",1)) / get_base1(pop,m,"pop",1)) * get_base1(mu,m,"mu",1)) * convolution0), 
                                "assigning variable prediction0");
                    }
                }
                current_statement_begin__ = 109;
                stan::model::assign(E_deaths0, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                            (1.0000000000000001e-15 * get_base1(prediction0,1,m,"prediction0",1)), 
                            "assigning variable E_deaths0");
                current_statement_begin__ = 110;
                for (int i = 2; i <= N2; ++i) {

                    current_statement_begin__ = 111;
                    stan::model::assign(E_deaths0, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                                (get_base1(ifr_noise,m,"ifr_noise",1) * dot_product(sub_col(prediction0,1,m,(i - 1)),tail(get_base1(f_rev,m,"f_rev",1),(i - 1)))), 
                                "assigning variable E_deaths0");
                }
            }
            }

            // validate generated quantities
            current_statement_begin__ = 94;
            current_statement_begin__ = 95;

            // write generated quantities
            for (int k_1__ = 0; k_1__ < M; ++k_1__) {
                for (int k_0__ = 0; k_0__ < N2; ++k_0__) {
                vars__.push_back(prediction0(k_0__, k_1__));
                }
            }
            for (int k_1__ = 0; k_1__ < M; ++k_1__) {
                for (int k_0__ = 0; k_0__ < N2; ++k_0__) {
                vars__.push_back(E_deaths0(k_0__, k_1__));
                }
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "base_nature_model";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= M; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= P; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha_hier" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "gamma";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= M; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lockdown" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= M; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "last_intervention" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "kappa";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= M; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "phi";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= M; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ifr_noise" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            for (int k_0__ = 1; k_0__ <= P; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "alpha" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_1__ = 1; k_1__ <= M; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= N2; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "prediction" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_1__ = 1; k_1__ <= M; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= N2; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "E_deaths" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_1__ = 1; k_1__ <= M; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= N2; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "Rt" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_1__ = 1; k_1__ <= M; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= N2; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "Rt_adj" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }


        if (!include_gqs__) return;
        for (int k_1__ = 1; k_1__ <= M; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= N2; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "prediction0" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= M; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= N2; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "E_deaths0" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= M; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= P; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha_hier" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "gamma";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= M; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lockdown" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= M; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "last_intervention" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "kappa";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= M; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "phi";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= M; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ifr_noise" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            for (int k_0__ = 1; k_0__ <= P; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "alpha" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_1__ = 1; k_1__ <= M; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= N2; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "prediction" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_1__ = 1; k_1__ <= M; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= N2; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "E_deaths" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_1__ = 1; k_1__ <= M; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= N2; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "Rt" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_1__ = 1; k_1__ <= M; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= N2; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "Rt_adj" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }


        if (!include_gqs__) return;
        for (int k_1__ = 1; k_1__ <= M; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= N2; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "prediction0" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= M; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= N2; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "E_deaths0" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }

}; // model

}

typedef base_nature_model_namespace::base_nature_model stan_model;

